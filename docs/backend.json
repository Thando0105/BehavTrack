{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the BehavTrack application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "uid": {
          "type": "string",
          "description": "The user's unique ID from Firebase Authentication."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The user's role within the system (teacher or admin)."
        },
        "classId": {
          "type": "string",
          "description": "Reference to the Class entity for teachers. (Relationship: Class 1:N User). Nullable for admins."
        }
      },
      "required": [
        "id",
        "uid",
        "email",
        "role"
      ]
    },
    "Student": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Student",
      "type": "object",
      "description": "Represents a student in the BehavTrack application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Student entity."
        },
        "name": {
          "type": "string",
          "description": "The student's name."
        },
        "grade": {
          "type": "string",
          "description": "The student's grade level."
        },
        "classId": {
          "type": "string",
          "description": "Reference to the Class entity this student belongs to. (Relationship: Class 1:N Student)"
        }
      },
      "required": [
        "id",
        "name",
        "grade",
        "classId"
      ]
    },
    "Incident": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Incident",
      "type": "object",
      "description": "Represents a behavior incident logged for a student.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Incident entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to the Student entity involved in the incident. (Relationship: Student 1:N Incident)"
        },
        "dateTime": {
          "type": "string",
          "description": "The date and time of the incident.",
          "format": "date-time"
        },
        "teacherId": {
          "type": "string",
          "description": "Reference to the User entity (teacher) who logged the incident. (Relationship: User 1:N Incident)"
        },
        "severity": {
          "type": "string",
          "description": "The severity level of the incident (low, medium, high)."
        },
        "description": {
          "type": "string",
          "description": "A description of the incident."
        }
      },
      "required": [
        "id",
        "studentId",
        "dateTime",
        "teacherId",
        "severity",
        "description"
      ]
    },
    "Summary": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Summary",
      "type": "object",
      "description": "Represents an AI-generated summary of a student's behavior over a week.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Summary entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to the Student entity this summary is for. (Relationship: Student 1:N Summary)"
        },
        "weekStart": {
          "type": "string",
          "description": "The start date of the week this summary covers.",
          "format": "date-time"
        },
        "summaryText": {
          "type": "string",
          "description": "The AI-generated summary text."
        },
        "suggestedActions": {
          "type": "string",
          "description": "Suggested actions based on the summary."
        }
      },
      "required": [
        "id",
        "studentId",
        "weekStart",
        "summaryText",
        "suggestedActions"
      ]
    },
    "Class": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Class",
      "type": "object",
      "description": "Represents a class to which students and teachers are associated.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Class entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the class."
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data. Uses path-based ownership for access control.",
          "params": [
            {
              "name": "userId",
              "description": "The unique ID of the user, matching the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/classes/{classId}",
        "definition": {
          "entityName": "Class",
          "schema": {
            "$ref": "#/backend/entities/Class"
          },
          "description": "Stores class data.",
          "params": [
            {
              "name": "classId",
              "description": "The unique ID of the class."
            }
          ]
        }
      },
      {
        "path": "/classes/{classId}/students/{studentId}",
        "definition": {
          "entityName": "Student",
          "schema": {
            "$ref": "#/backend/entities/Student"
          },
          "description": "Stores student data. Organized under classes for easy querying.  Includes denormalized 'classId'.",
          "params": [
            {
              "name": "classId",
              "description": "The unique ID of the class to which the student belongs."
            },
            {
              "name": "studentId",
              "description": "The unique ID of the student."
            }
          ]
        }
      },
      {
        "path": "/incidents/{incidentId}",
        "definition": {
          "entityName": "Incident",
          "schema": {
            "$ref": "#/backend/entities/Incident"
          },
          "description": "Stores incident data. Includes denormalized 'teacherId' and 'classId' for authorization independence.",
          "params": [
            {
              "name": "incidentId",
              "description": "The unique ID of the incident."
            }
          ]
        }
      },
      {
        "path": "/summaries/{summaryId}",
        "definition": {
          "entityName": "Summary",
          "schema": {
            "$ref": "#/backend/entities/Summary"
          },
          "description": "Stores AI-generated summaries of student behavior.",
          "params": [
            {
              "name": "summaryId",
              "description": "The unique ID of the summary."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the BehavTrack application's requirements for user authentication, role-based access control, student behavior tracking, and AI-powered summaries. The primary goal is to ensure data security, scalability, and ease of querying while adhering to the principles of Authorization Independence and Structural Segregation.\n\n**Authorization Independence (CRITICAL):** To avoid hierarchical authorization dependencies, key authorization data (such as classId for teachers) is denormalized into the `incidents` collection. This allows security rules to validate access without needing to perform `get()` operations on parent documents, enabling atomic transactions and improving performance.\n\n**Structural Segregation:** The data is segregated into collections based on entity type (users, students, classes, incidents, summaries) to maintain a homogeneous security posture within each collection.\n\n**QAPs (Rules are not Filters):** Access control is implemented through a combination of path-based ownership (e.g., `/users/{userId}`) and denormalized authorization data (`classId` in `incidents`). This enables secure list operations, as the rules can efficiently filter data based on the user's role and class membership.\n\n**Access Modeling:**\n*   **Users:** Stored in the `/users/{userId}` collection for path-based ownership.\n*   **Students:** Stored in the `/classes/{classId}/students/{studentId}` collection to easily query students in a class and ensure teachers can only view students belonging to their classes.\n*   **Incidents:** Stored in the `/incidents/{incidentId}` collection, with denormalized `teacherId` and `classId` fields to enforce teacher-level access control without additional `get()` calls. Also, store the incidents as subcollection inside the student document.\n*   **Summaries:** Stored in the `/summaries/{summaryId}` collection, associated with `studentId` to facilitate the generation of weekly summaries."
  }
}