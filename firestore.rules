/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and leverages denormalized data to secure access to class, student, incident, and summary information.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /classes/{classId}: Stores class information.
 * - /classes/{classId}/students/{studentId}: Stores student information, nested under classes.
 * - /incidents/{incidentId}: Stores incident reports.
 * - /summaries/{summaryId}: Stores AI-generated summaries.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed for privacy.
 * - Data required for authorization (e.g., classId, teacherId) is denormalized onto documents to avoid costly `get()` calls within rules.
 *
 * Denormalization for Authorization:
 * - /classes/{classId}/students/{studentId} includes a denormalized `classId` field.
 * - /incidents/{incidentId} includes denormalized `teacherId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot read the profile at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the profile at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read access to class data, but restricts creation, updates, and deletion.
     * @path /classes/{classId}
     * @allow (get) Any user can read class data at /classes/class_123.
     * @allow (list) Any user can list classes.
     * @deny (create) No one can create classes.
     * @deny (update) No one can update classes.
     * @deny (delete) No one can delete classes.
     * @principle Provides public read access but restricts write access to class data.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to student data within a class, but restricts creation, updates, and deletion.
     * @path /classes/{classId}/students/{studentId}
     * @allow (get) Any user can read student data at /classes/class_123/students/student_456.
     * @allow (list) Any user can list students within a class.
     * @deny (create) No one can create students.
     * @deny (update) No one can update students.
     * @deny (delete) No one can delete students.
     * @principle Provides public read access but restricts write access to student data, nested under classes.
     */
    match /classes/{classId}/students/{studentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to incident data, but restricts creation, updates, and deletion.
     * @path /incidents/{incidentId}
     * @allow (get) Any user can read incident data at /incidents/incident_789.
     * @allow (list) Any user can list incidents.
     * @deny (create) No one can create incidents.
     * @deny (update) No one can update incidents.
     * @deny (delete) No one can delete incidents.
     * @principle Provides public read access but restricts write access to incident data.
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to summary data, but restricts creation, updates, and deletion.
     * @path /summaries/{summaryId}
     * @allow (get) Any user can read summary data at /summaries/summary_abc.
     * @allow (list) Any user can list summaries.
     * @deny (create) No one can create summaries.
     * @deny (update) No one can update summaries.
     * @deny (delete) No one can delete summaries.
     * @principle Provides public read access but restricts write access to summary data.
     */
    match /summaries/{summaryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}