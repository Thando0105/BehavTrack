/**
 * @fileoverview Firestore Security Rules for BehavTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and a teacher-ownership model for incidents. Class and student data
 * are more open but restricted to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owner.
 * - /classes/{classId}: Stores class information.
 * - /classes/{classId}/students/{studentId}: Stores student information, nested under classes.
 * - /incidents/{incidentId}: Stores incident reports. Access is restricted to the teacher who created the incident.
 * - /summaries/{summaryId}: Stores AI summaries.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require user authentication.
 * - Data validation is minimal to allow for rapid prototyping, focusing on
 *   authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - The `Incident` entity includes a `teacherId` field to simplify ownership checks
 *   and prevent the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user123", ... } } }
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their own profile.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *   Request: { "auth": { "uid": "user456" }, "resource": { "data": { "id": "user123", ... } } }
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     *   Request: { "auth": { "uid": "user456" } }
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages class data.
     * @path /classes/{classId}
     * @allow (get, list) - Authenticated users can read class data.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (create) - Authenticated users can create new classes.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (update, delete) - No one can update or delete class data in this prototype.
     *   Request: { "auth": { "uid": "user123" } }
     * @deny (update, delete) - Authenticated users cannot update or delete class data.
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Requires authentication for read and write access.
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages student data nested under classes.
     * @path /classes/{classId}/students/{studentId}
     * @allow (get, list) - Authenticated users can read student data.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (create) - Authenticated users can create student data.
     *   Request: { "auth": { "uid": "user123" } }
     * @allow (update, delete) - No one can update or delete student data in this prototype.
     * @deny (update, delete) - Authenticated users cannot update or delete student data.
     *   Request: { "auth": { "uid": "user123" } }
     * @principle Requires authentication for read and write access.
     */
    match /classes/{classId}/students/{studentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages incident data. Only the teacher who created the incident can read/write it.
     * @path /incidents/{incidentId}
     * @allow (create) - Teacher 'teacher123' can create a new incident with teacherId = 'teacher123'.
     *   Request: { "auth": { "uid": "teacher123" }, "resource": { "data": { "teacherId": "teacher123", ... } } }
     * @allow (get, update, delete) - Teacher 'teacher123' can read, update, or delete an incident they own.
     *   Request: { "auth": { "uid": "teacher123" }, resource.data: { teacherId: "teacher123" } }
     * @deny (create) - Teacher 'teacher456' cannot create an incident with teacherId = 'teacher123'.
     *   Request: { "auth": { "uid": "teacher456" }, "resource": { "data": { "teacherId": "teacher123", ... } } }
     * @deny (get, update, delete) - Teacher 'teacher456' cannot read, update, or delete an incident owned by 'teacher123'.
     *   Request: { "auth": { "uid": "teacher456" }, resource.data: { teacherId: "teacher123" } }
     * @principle Enforces document ownership for all operations on incident reports.
     */
    match /incidents/{incidentId} {
      allow get: if resource.data.teacherId == request.auth.uid;
      allow list: if false;
      allow create: if request.resource.data.teacherId == request.auth.uid;
      allow update: if resource != null && resource.data.teacherId == request.auth.uid;
      allow delete: if resource != null && resource.data.teacherId == request.auth.uid;
    }

     /**
      * @description Manages AI-generated summary data.
      * @path /summaries/{summaryId}
      * @allow (get, list) - Authenticated users can read summaries.
      *   Request: { "auth": { "uid": "user123" } }
      * @allow (create) - Authenticated users can create new summaries.
      *   Request: { "auth": { "uid": "user123" } }
      * @allow (update, delete) - No one can update or delete summaries in this prototype.
      * @deny (update, delete) - Authenticated users cannot update or delete summaries.
      *   Request: { "auth": { "uid": "user123" } }
      * @principle Requires authentication for read access.
      */
    match /summaries/{summaryId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}