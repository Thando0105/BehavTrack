/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for the BehavTrack application.
 *
 * Core Philosophy:
 * Access is strictly controlled based on user roles (teacher, admin) and data ownership.
 * Teachers can only access data related to their assigned class.
 * Admins have full access to all data.
 * The backend AI function is the only entity allowed to create summaries.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the user's UID.
 * - /students/{studentId}: Stores student data.
 * - /incidents/{incidentId}: Stores incident reports.
 * - /summaries/{summaryId}: Stores AI-generated summaries.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Teachers can only read summaries and incidents related to students in their class.
 * - Only the backend AI function can create summaries.
 * - Data validation is relaxed to allow for rapid prototyping. Only essential authorization fields are validated.
 *
 * Denormalization for Authorization:
 * The `classId` is duplicated on both the `Student`, `Incident` and `Summary` documents. This allows rules to efficiently check if a teacher has access to a student's data based on class assignment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different UID.
     * @deny (get) Another user cannot read user123's profile.
     * @deny (update) Another user cannot modify user123's profile.
     * @deny (delete) Another user cannot delete user123's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to student data.
     * @path /students/{studentId}
     * @allow (get) Admin can read any student profile.
     * @allow (get) Teacher can read students from their own class.
     * @allow (create) Admin can create any student profile.
     * @allow (update) Admin can update any student profile.
     * @allow (delete) Admin can delete any student profile.
     * @deny (get) Teacher cannot read students from other classes.
     * @deny (create) Teacher cannot create student profiles.
     * @deny (update) Teacher cannot update student profiles.
     * @deny (delete) Teacher cannot delete student profiles.
     * @principle Enforces role-based access control for student profiles.
     */
    match /students/{studentId} {
      allow get: if isAdmin() || (isTeacher() && isTeacherForClass(resource.data.classId));
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to incident data.
     * @path /incidents/{incidentId}
     * @allow (get) Admin can read any incident.
     * @allow (get) Teacher can read incidents from their own class.
     * @allow (create) Admin can create any incident.
     * @allow (update) Admin can update any incident.
     * @allow (delete) Admin can delete any incident.
     * @deny (get) Teacher cannot read incidents from other classes.
     * @deny (create) Teacher cannot create incidents.
     * @deny (update) Teacher cannot update incidents.
     * @deny (delete) Teacher cannot delete incidents.
     * @principle Enforces role-based access control for incident reports.
     */
    match /incidents/{incidentId} {
      allow get: if isAdmin() || (isTeacher() && isTeacherForClass(resource.data.classId));
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to AI-generated summaries.
     * @path /summaries/{summaryId}
     * @allow (get) Admin can read any summary.
     * @allow (get) Teacher can read summaries for students in their own class.
     * @allow (create) Only the backend AI function can create summaries.
     * @allow (update) Admin can update any summary.
     * @allow (delete) Admin can delete any summary.
     * @deny (create) Teacher cannot create summaries.
     * @deny (update) Teacher cannot update summaries.
     * @deny (delete) Teacher cannot delete summaries.
     * @principle Enforces role-based access control for summaries and restricts creation to the backend AI function.
     */
    match /summaries/{summaryId} {
      allow get: if isAdmin() || (isTeacher() && isTeacherForClass(resource.data.classId));
      allow list: if isAdmin();
      allow create: if isAIDevice();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
  }

  function isTeacher() {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
  }

  function isTeacherForClass(classId) {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId == classId;
  }

  function isAIDevice() {
    // Replace with your AI backend's authentication logic. This is a placeholder.
    return request.auth != null && request.auth.uid == 'ai-backend-service-account';
  }
}