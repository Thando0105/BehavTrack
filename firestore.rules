/**
 * @fileoverview Firestore Security Rules for BehavTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * User data is protected by ownership, while class and student data is accessible based on user role and class membership.
 * The goal is to balance security with the flexibility needed for teachers and admins to manage student behavior effectively.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /classes/{classId}: Stores class information.
 * - /classes/{classId}/students/{studentId}: Stores student data nested under the relevant class.
 * - /incidents/{incidentId}: Stores incident reports, accessible to teachers and admins.
 * - /summaries/{summaryId}: Stores AI-generated summaries of student behavior.
 *
 * Key Security Decisions:
 * - User data is strictly private; users can only access their own profile.
 * - Listing users is disallowed to prevent enumeration.
 * - Class and student data access is role-based, allowing teachers to manage their classes and admins to oversee all data.
 * - Incident and summary data is accessible to teachers and admins for reporting and analysis.
 *
 * Denormalization for Authorization:
 * - Student documents under /classes/{classId}/students/{studentId} include a denormalized 'classId' field to simplify rules.
 * - Incident documents include 'teacherId' to quickly verify the author.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's ID matches the userId in the path.
     * @allow (get, update, delete) - If the authenticated user's ID matches the userId in the path.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces strict user ownership for all operations.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow list: if false;
    }

    /**
     * @description Manages access to class data.
     * @path /classes/{classId}
     * @allow (get, list) - Authenticated users can view class data.
     * @allow (create) - Authenticated users can create class data.
     * @allow (update, delete) - Authenticated users can update and delete class data.
     * @deny (create, update, delete) - If the user is not authenticated
     * @principle Allows any authenticated user to read and write class data.
     */
    match /classes/{classId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to student data nested under class.
     * @path /classes/{classId}/students/{studentId}
     * @allow (get, list) - Authenticated users can read student data.
     * @allow (create) - Authenticated users can create student data.
     * @allow (update, delete) - Authenticated users can update and delete student data.
     * @deny (create, update, delete) - If the user is not authenticated.
     * @principle Allows any authenticated user to read and write student data.
     */
    match /classes/{classId}/students/{studentId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to incident data.
     * @path /incidents/{incidentId}
     * @allow (get, list) - Authenticated users can read incident data.
     * @allow (create) - Authenticated users can create incident data.
     * @allow (update, delete) - Authenticated users can update and delete incident data.
     * @deny (create, update, delete) - If the user is not authenticated
     * @principle Allows any authenticated user to read and write incident data.
     */
    match /incidents/{incidentId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to AI-generated summaries of student behavior.
     * @path /summaries/{summaryId}
     * @allow (get, list) - Authenticated users can read summary data.
     * @allow (create) - Authenticated users can create summary data.
     * @allow (update, delete) - Authenticated users can update and delete summary data.
     * @deny (create, update, delete) - If the user is not authenticated
     * @principle Allows any authenticated user to read and write summary data.
     */
    match /summaries/{summaryId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}