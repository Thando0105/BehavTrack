/**
 * @fileoverview Firestore Security Rules for BehavTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with a strict user-ownership model
 * for user profiles. Teachers can manage students and incidents within their assigned classes.
 * Admins (currently not explicitly supported in the rules) would have broader access.
 * Public listing is generally disallowed except where explicitly intended (e.g., a curated list of public resources).
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /classes/{classId}: Stores class information.
 * - /classes/{classId}/students/{studentId}: Stores student information, nested under classes.
 * - /incidents/{incidentId}: Stores incident reports, with denormalized teacherId.
 * - /summaries/{summaryId}: Stores AI-generated summaries.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Path-based ownership is enforced for user profiles.
 * - Teachers have create, read, update, delete access to students and incidents within their class via `classId`.
 * - Admins are currently not explicitly supported, all access is denied. This can be changed in the future.
 *
 * Denormalization for Authorization:
 * - Incidents: The `Incident` entity includes a `teacherId` field, which is denormalized from the user profile.
 *   This allows direct validation of teacher ownership without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * - No structural segregation is currently implemented. All data is stored in a single database instance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) If the user's UID matches the userId in the path.
     * @allow (get, update, delete) If the user's UID matches the userId in the path.
     * @deny (create) If the user's UID does not match the userId in the path.
     * @deny (get, update, delete) If the user's UID does not match the userId in the path.
     * @deny (list) User listing is not allowed.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to class data.
     * @path /classes/{classId}
     * @allow (create) Only authenticated users can create classes.
     * @allow (get, list) Any authenticated user can read class data.
     * @deny (update, delete) No user can update or delete class data.
     * @principle Restricts write access to classes, allows public read.
     */
    match /classes/{classId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to student data nested under classes.
     * @path /classes/{classId}/students/{studentId}
     * @allow (create) Only authenticated users can create student data under a class. The classId must match.
     * @allow (get, list) Any authenticated user can read student data under a class.
     * @allow (update, delete) No user can update or delete student data.
     * @principle Restricts write access to students, allows public read.
     */
    match /classes/{classId}/students/{studentId} {
      allow create: if isSignedIn() && request.resource.data.classId == classId;
      allow get, list: if true;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to incident data.
     * @path /incidents/{incidentId}
     * @allow (create) Only authenticated users can create incident data, and teacherId must match their UID.
     * @allow (get, list) Any authenticated user can read incident data.
     * @allow (update, delete) Only the teacher who created the incident can update or delete it.
     * @principle Restricts write access to incidents to the creating teacher, allows public read.
     */
    match /incidents/{incidentId} {
        function isTeacherOwner(teacherId) {
            return request.auth.uid == teacherId;
        }
        function isExistingTeacherOwner(teacherId) {
            return isTeacherOwner(teacherId) && resource != null;
        }

        allow create: if isSignedIn() && isTeacherOwner(request.resource.data.teacherId);
        allow get, list: if true;
        allow update: if isExistingTeacherOwner(resource.data.teacherId);
        allow delete: if isExistingTeacherOwner(resource.data.teacherId);
    }

    /**
     * @description Controls access to AI-generated summary data.
     * @path /summaries/{summaryId}
     * @allow (get, list) Any authenticated user can read summary data.
     * @deny (create, update, delete) No user can create, update, or delete summary data.
     * @principle Restricts write access to summaries.
     */
    match /summaries/{summaryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}