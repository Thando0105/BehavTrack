/**
 * @fileOverview Firestore Security Rules for the BehavTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-based ownership and role-based access control. Teachers have access to data related to their classes and students, while admins have broader access.  Authorization independence is achieved via denormalization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /classes/{classId}: Stores class information. No specific ownership.
 * - /classes/{classId}/students/{studentId}: Stores student information, nested under classes.
 * - /incidents/{incidentId}: Stores incident reports, accessible based on the teacher's class membership. Teacher and Class IDs are denormalized onto these records.
 * - /summaries/{summaryId}: Stores AI-generated summaries. Access is not restricted for prototyping purposes.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Listing all users is denied.
 * - Incident write access requires the user to be a teacher and the incident's teacherId to match their own ID.
 * - Data type validation is relaxed in this prototype phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - The Incident entity includes denormalized 'teacherId' and 'classId' fields to enable authorization checks without needing to perform additional `get()` operations on parent documents.
 *
 * Structural Segregation:
 * - Data is segregated into collections based on entity type (users, students, classes, incidents, summaries) to maintain a homogeneous security posture within each collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-based ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *   request.auth.uid == 'user123'
     *   request.resource.data.uid == 'user123'
     * @allow (get) User with ID 'user123' reads their own profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' updates their own profile.
     *   request.auth.uid == 'user123'
     *   resource.data.uid == 'user123'
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.uid == 'user456'
     * @deny (get) User with ID 'user123' tries to read profile of 'user456'.
     *   request.auth.uid == 'user123'
     * @principle Enforces document ownership for reads and writes, and validates relational integrity.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if false;
    }

    /**
     * @description Allows read/write access to class data. No ownership enforced for prototyping.
     * @path /classes/{classId}
     * @allow (get) Any authenticated user can read class data.
     *   request.auth.uid != null
     * @allow (create) Any authenticated user can create class data.
     *   request.auth.uid != null
     * @deny (delete) No one can delete
     * @principle No specific access control for classes in this prototype.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create, update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Allows read/write access to student data within a class. No ownership enforced for prototyping.
     * @path /classes/{classId}/students/{studentId}
     * @allow (get) Any authenticated user can read student data.
     *   request.auth.uid != null
     * @allow (create) Any authenticated user can create student data.
     *   request.auth.uid != null
     * @deny (delete) No one can delete
     * @principle No specific access control for students in this prototype.
     */
    match /classes/{classId}/students/{studentId} {
      allow get, list: if true;
      allow create, update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Restricts incident creation and modification to teachers.
     * @path /incidents/{incidentId}
     * @allow (create) Teacher 'teacher123' creates an incident with teacherId 'teacher123'.
     *   request.auth.uid == 'teacher123'
     *   request.resource.data.teacherId == 'teacher123'
     * @allow (get) Any authenticated user can get incident data
     *   request.auth.uid != null
     * @allow (list) Any authenticated user can list incident data
     *   request.auth.uid != null
     * @allow (update) Teacher 'teacher123' updates an existing incident they own.
     *   request.auth.uid == 'teacher123'
     *   resource.data.teacherId == 'teacher123'
     * @deny (create) User 'student456' tries to create an incident.
     *   request.auth.uid == 'student456'
     * @deny (update) User 'teacher123' tries to update an incident they don't own.
     *   request.auth.uid == 'teacher123'
     *   resource.data.teacherId != 'teacher123'
     * @principle Enforces teacher-level access control based on the denormalized 'teacherId' field.
     */
    match /incidents/{incidentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && isExistingIncidentOwner(request.auth.uid, resource);
      allow delete: if false;
    }

    /**
     * @description Allows public read access to summaries. Write access is not restricted for prototyping.
     * @path /summaries/{summaryId}
     * @allow (get) Any user can read a summary.
     *   true
     * @allow (create) Any authenticated user can create a summary.
     *   request.auth.uid != null
     * @principle Public read access for summaries; write access open for prototyping.
     */
    match /summaries/{summaryId} {
      allow get, list: if true;
      allow create, update: if isSignedIn();
      allow delete: if false;
    }
  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the requested user ID.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user ID matches, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of an existing incident.
   * @param {string} userId The user ID to check against.
   * @param {Resource} resource The existing document's data.
   * @return {boolean} True if the user is the owner and the document exists.
   */
  function isExistingIncidentOwner(userId, resource) {
      return resource != null && resource.data.teacherId == userId;
  }
}