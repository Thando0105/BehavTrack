/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system for the BehavTrack application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with access restricted to the user themselves and admins.
 * - /classes/{classId}: Stores class information. No specific access control is implemented for classes themselves in this version.
 * - /classes/{classId}/students/{studentId}: Stores student information, accessible to admins and teachers of the relevant class.
 * - /incidents/{incidentId}: Stores incident reports, accessible to admins and teachers of the relevant class.
 * - /summaries/{summaryId}: Stores student behavior summaries, accessible to admins and teachers of the relevant class.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document.
 * - Admins have full read/write access to all data.
 * - Teachers can read/write student and incident data only for students in their assigned classes.
 * - Listing of all documents is restricted based on the user's role and class assignment.
 *
 * Denormalization for Authorization:
 * - The `Incident` entity includes denormalized `teacherId` and `classId` fields to allow teachers to easily access incidents related to their students.
 * - The `Student` enitity includes denormalized `classId` to allow teachers to easily access students related to their classes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId: A user can read and write their own profile.
     * @deny (read, write) if request.auth.uid != userId: A user cannot read or write another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Controls access to class data. No access control is implemented in this version.
     * @path /classes/{classId}
     * @allow get, list: if true: Anyone can read class data.
     * @deny create, update, delete: if false: No one can create, update, or delete class data.
     * @principle Placeholder for future access control implementation.
     */
    match /classes/{classId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to student data within a class.
     * @path /classes/{classId}/students/{studentId}
     * @allow get, list, create, update, delete if isAdmin(): Admins have full access.
     * @allow get, list, create, update, delete if isTeacher() && resource.data.classId == classId: Teachers can access students in their assigned classes.
     * @deny get, list, create, update, delete if !isAdmin() && !(isTeacher() && resource.data.classId == classId): Unauthorized users cannot access student data.
     * @principle Enforces role-based access control for student data.
     */
    match /classes/{classId}/students/{studentId} {
      allow get, list: if isAdmin() || (isTeacher() && getTeacherClasses().hasAny([classId]));
      allow create: if isAdmin() || (isTeacher() && request.resource.data.classId == classId);
      allow update: if isAdmin() || (isTeacher() && resource.data.classId == classId);
      allow delete: if isAdmin() || (isTeacher() && resource.data.classId == classId);
    }

    /**
     * @description Controls access to incident data.
     * @path /incidents/{incidentId}
     * @allow get, list, create, update, delete if isAdmin(): Admins have full access.
     * @allow get, list, create if isTeacher() && request.resource.data.classId in getTeacherClasses(): Teachers can create incidents for their own students.
     * @deny update, delete if isTeacher(): Teachers do not have update or delete priviledges for incidents, even those related to their own students.
     * @principle Enforces role-based access control for incident reporting.
     */
    match /incidents/{incidentId} {
      allow get, list: if isAdmin() || (isTeacher() && resource.data.classId in getTeacherClasses());
      allow create: if isAdmin() || (isTeacher() && request.resource.data.classId in getTeacherClasses());
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to AI-generated summaries.
     * @path /summaries/{summaryId}
     * @allow get, list, create, update, delete if isAdmin(): Admins have full access.
     * @allow get, list if isTeacher() && resource.data.studentId in getTeacherStudentIds(): Teachers can read summaries for their own students.
     * @deny create, update, delete if isTeacher(): Teachers do not have create, update, or delete priviledges for summaries.
     * @principle Enforces role-based access control for student summaries.
     */
    match /summaries/{summaryId} {
      allow get, list: if isAdmin() || (isTeacher() && resource.data.studentId in getTeacherStudentIds());
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Checks if the user is signed in.
     * @returns True if the user is authenticated, false otherwise.
     * @principle Verifies user identity for all protected operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns True if the user is the owner, false otherwise.
     * @principle Enforces path-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the "admin" role.
     * @returns True if the user is an admin, false otherwise.
     * @principle Implements role-based access control.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    /**
     * @description Checks if the user has the "teacher" role.
     * @returns True if the user is a teacher, false otherwise.
     * @principle Implements role-based access control.
     */
    function isTeacher() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "teacher";
    }

        /**
     * @description Gets the class IDs associated with a teacher.
     * @returns An array of class IDs.
     * @principle Retrieves class context for teachers.
     */
    function getTeacherClasses() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classes;
    }

    /**
     * @description Gets the student IDs associated with a teacher.
     * @returns An array of student IDs.
     * @principle Retrieves student context for teachers.
     */
    function getTeacherStudentIds() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.studentIds;
    }
  }
}