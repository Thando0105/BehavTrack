/**
 * @file Firestore Security Rules for BehavTrack Application
 * @core_philosophy This ruleset employs a hybrid security model, balancing open read access for certain collections with strict ownership and role-based access control for others.
 * @data_structure The data is organized into top-level collections for `users`, `classes`, `incidents`, and `summaries`. The `students` collection is nested under `classes`.
 * @key_security_decisions
 *   - Users can only manage their own profile data under `/users/{userId}`.
 *   - Listing of users is disallowed for privacy.
 *   - Incidents and students are readable by any authenticated user. Writes need authorization.
 * @denormalization_for_authorization The `Incident` entity includes `teacherId`, enabling direct ownership checks without additional reads.
 * @structural_segregation N/A - There is no segregation in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the `/users/{userId}` collection, ensuring users can only manage their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their own profile at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @deny (update, delete) - User with UID 'user_abc' cannot update or delete the profile at /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/classes/{classId}` collection, allowing anyone to read and only admins to modify.
     * @path /classes/{classId}
     * @allow (get, list) - Any signed-in user can read or list classes.
     * @deny (create, update, delete) - Only admins can create, update, or delete classes (TODO: Implement admin role check).
     * @principle Restricts write access to admins (not yet implemented).
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Secures the `/classes/{classId}/students/{studentId}` collection, allowing reads for signed-in users, and write access TBD
     * @path /classes/{classId}/students/{studentId}
     * @allow (get, list) - Any signed-in user can read or list students.
     * @deny (create, update, delete) - Only admins can create, update, or delete students (TODO: Implement admin role check).
     * @principle Restricts write access to admins (not yet implemented).
     */
    match /classes/{classId}/students/{studentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Implement admin role check

    }

    /**
     * @description Secures the `/incidents/{incidentId}` collection, allowing reads for signed-in users, and write access to teachers who own the incidents.
     * @path /incidents/{incidentId}
     * @allow (get, list) - Any signed-in user can read or list incidents.
     * @allow (create) - A teacher can create a new incident if they are the owner.
     * @allow (update, delete) - A teacher can update or delete an existing incident they own.
     * @deny (create) - A user cannot create an incident for another teacher.
     * @deny (update, delete) - A user cannot update or delete an incident owned by another teacher.
     * @principle Enforces ownership for incident writes and open access for reads.
     */
    match /incidents/{incidentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.teacherId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.teacherId == request.auth.uid && resource != null;
    }

    /**
     * @description Secures the `/summaries/{summaryId}` collection, allowing anyone to read and only admins to modify.
     * @path /summaries/{summaryId}
     * @allow (get, list) - Any signed-in user can read or list summaries.
     * @deny (create, update, delete) - Only admins can create, update, or delete summaries (TODO: Implement admin role check).
     * @principle Restricts write access to admins (not yet implemented).
     */
    match /summaries/{summaryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Implement admin role check
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the current user is signed in.
     * @return true if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return true if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @return true if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}