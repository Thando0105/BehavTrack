/**
 * @fileoverview Firestore Security Rules for BehavTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with 'admin' and 'teacher' roles.
 * User data is stored under `/users/{userId}` and is accessible only to the owner.
 * Teachers can create student and incident records for their assigned classes. Admins have full access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with role and classId.
 * - /students/{studentId}: Stores student data.
 * - /incidents/{incidentId}: Stores incident reports.
 * - /summaries/{summaryId}: Stores AI-generated summaries.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Teachers are restricted to creating students and incidents within their assigned class.
 *
 * Denormalization for Authorization:
 * - Incident documents must contain a `classId` field to allow teachers to create incidents only for their assigned classes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the document ID.
     * @allow (get, update, delete) - If the requesting user's UID matches the document ID (owner).
     * @deny (list) - User listing is disallowed.
     * @deny (create) - If the user's UID does not match the document ID.
     * @principle Enforces user ownership for all data access.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Secures student data.
     * @path /students/{studentId}
     * @allow (create) - If the user is a teacher and the student belongs to their class OR the user is an admin.
     * @allow (get, list) - Public read access.
     * @allow (update, delete) - If the user is an admin.
     * @deny (update, delete) - If the user is a teacher. Teachers cannot modify or delete student records.
     * @principle Admins can manage all students, teachers can only create students for their class.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (isTeacher() && request.resource.data.classId in getTeacherClasses() || isAdmin());
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secures incident data.
     * @path /incidents/{incidentId}
     * @allow (create) - If the user is a teacher and the incident belongs to their class OR the user is an admin.
     * @allow (get, list) - Public read access.
     * @allow (update, delete) - If the user is an admin.
     * @deny (update, delete) - If the user is a teacher. Teachers cannot modify or delete incident records.
     * @principle Admins can manage all incidents, teachers can only create incidents for their class.
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (isTeacher() && request.resource.data.classId in getTeacherClasses() || isAdmin());
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secures AI-generated summary data.
     * @path /summaries/{summaryId}
     * @allow (create) - If the user is an admin.
     * @allow (get, list) - Public read access.
     * @allow (update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is a teacher. Teachers cannot create, update or delete summary records.
     * @principle Admins can manage all summaries.
     */
    match /summaries/{summaryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Secures student data within a class context.
     * @path /classes/{classId}/students/{studentId}
     * @allow (create) - If the user is a teacher and the classId is in the teacher's classes.
     * @deny (get, list, update, delete) - No other operations allowed.
     * @principle Teachers can create students within their assigned classes.
     */
    match /classes/{classId}/students/{studentId} {
      allow create: if isSignedIn() && isTeacher() && classId in getTeacherClasses();
      allow get, list, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }

    function isTeacher() {
      return isSignedIn() && getRole() == 'teacher';
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function getTeacherClasses() {
      return [get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId];
    }
  }
}