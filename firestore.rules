/**
 * @fileoverview Firestore Security Rules for BehavTrack application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with specific rules governing access to user, student, incident, and summary data.
 * It provides admin and teacher roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /students/{studentId}: Stores student profiles.
 * - /incidents/{incidentId}: Stores incident reports.
 * - /summaries/{summaryId}: Stores AI-generated summaries of student behavior.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user document. Admins cannot list all users.
 * - Public read access is not granted to any collections.
 * - Write access to all collections is restricted based on role or ownership.
 *
 * Denormalization for Authorization:
 *  - The `Incident` and `Summary` entities include a `classId` field to facilitate access control based on the teacher's assigned class.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can only access their own profile.
     * @path /users/{userId}
     * @allow (get, read, write) if the authenticated user's UID matches the document ID.
     * @deny (get, read, write) if the authenticated user's UID does not match the document ID.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get, read, write: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to student profiles. Admins can manage all students. Teachers can only read students in their own classId.
     * @path /students/{studentId}
     * @allow (get, list, read, write) if the request is made by an admin.
     * @allow (get, list, read) if the request is made by a teacher and the student belongs to their class.
     * @deny (get, list, read, write) if the request is not made by an admin or a teacher for their own class.
     * @principle Enforces role-based access control for student data.
     */
    match /students/{studentId} {
        allow get, list: if isAdmin() || (isTeacher() && resource.data.classId == getTeacherClassId());
        allow read: if isAdmin() || (isTeacher() && resource.data.classId == getTeacherClassId());
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

      /**
     * @description Controls access to students nested inside a class subcollection. Admins can manage all students. Teachers can only read students in their own classId.
     * @path /classes/{classId}/students/{studentId}
     * @allow (get, list, read, write) if the request is made by an admin.
     * @allow (get, list, read) if the request is made by a teacher and the student belongs to their class.
     * @deny (get, list, read, write) if the request is not made by an admin or a teacher for their own class.
     * @principle Enforces role-based access control for student data.
     */
    match /classes/{classId}/students/{studentId} {
        allow get, list: if isAdmin() || (isTeacher() && classId == getTeacherClassId());
        allow read: if isAdmin() || (isTeacher() && classId == getTeacherClassId());
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }


    /**
     * @description Controls access to incident reports.
     * @path /incidents/{incidentId}
     * @allow (create) if the teacher creating the incident belongs to the same classId as the student.
     * @allow (get, list, read, update, delete) if the user is an admin or the teacher who created the incident.
     * @deny (get, list, read, update, delete) if not an admin or the creating teacher.
     * @principle Enforces access control based on teacher's class and admin privileges.
     */
    match /incidents/{incidentId} {
        allow create: if isSignedIn() && isTeacher() && request.resource.data.teacherId == request.auth.uid && request.resource.data.classId == getTeacherClassId();
        allow get, list, read: if isAdmin() || (isSignedIn() && isTeacher() && resource.data.teacherId == request.auth.uid);
        allow update: if isAdmin() || (isSignedIn() && isTeacher() && resource.data.teacherId == request.auth.uid && resource != null);
        allow delete: if isAdmin() || (isSignedIn() && isTeacher() && resource.data.teacherId == request.auth.uid && resource != null);
    }

    /**
     * @description Controls access to AI-generated summaries.
     * @path /summaries/{summaryId}
     * @allow (create) if the teacher creating the summary belongs to the same classId as the student.
     * @allow (get, list, read, update, delete) if the user is an admin or the summary belongs to the same class as the teacher.
     * @deny (get, list, read, update, delete) if not an admin or the same class.
     * @principle Enforces access control based on teacher's class and admin privileges.
     */
    match /summaries/{summaryId} {
        allow create: if isSignedIn() && isTeacher() && request.resource.data.classId == getTeacherClassId();
        allow get, list, read: if isAdmin() || (isTeacher() && resource.data.classId == getTeacherClassId());
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and it already exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    /**
     * @description Checks if the user has the 'teacher' role.
     * @return {boolean} True if the user is a teacher, false otherwise.
     */
    function isTeacher() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "teacher";
    }

    /**
     * @description Gets the class ID of the teacher.
     * @return {string} The class ID of the teacher.
     */
    function getTeacherClassId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;
    }
  }
}